from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, Dict, Any
import requests
import os
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("ai_detection")

# Load environment variables
load_dotenv()

# Get API key
EDENAI_API_KEY = os.getenv("EDENAI_API_KEY")
if not EDENAI_API_KEY:
    raise ValueError("EDENAI_API_KEY environment variable not set")

app = FastAPI(
    title="AI Content Detection API",
    description="API for detecting AI-generated text, images, and deepfakes",
    version="1.0.0",
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Base URL for Eden AI API
EDENAI_BASE_URL = "https://api.edenai.run/v2"

# Headers for API requests
headers = {
    "accept": "application/json",
    "authorization": f"Bearer {EDENAI_API_KEY}",
    "content-type": "application/json"
}

@app.get("/")
async def root():
    return {
        "message": "Welcome to the AI Content Detection API",
        "endpoints": {
            "text_detection": "/text-ai-detection",
            "image_detection": "/image-ai-detection",
            "deepfake_detection": "/deepfake-detection"
        },
        "documentation": "/docs"
    }

@app.post("/text-ai-detection")
async def detect_ai_text(
    text: str = Form(...), 
    providers: str = Form("sapling,originalityai")
):
    """
    Detect if text content was generated by AI.
    
    - **text**: The text content to analyze
    - **providers**: Comma-separated list of provider names (default: "sapling,originalityai")
    """
    url = f"{EDENAI_BASE_URL}/text/ai_detection"
    
    payload = {
        "providers": providers,
        "text": text,
        "response_as_dict": True,
        "attributes_as_list": False,
        "show_original_response": False
    }
    
    try:
        logger.info(f"Sending text detection request for providers: {providers}")
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        result = response.json()
        logger.info("Text detection request successful")
        return {
            "results": result,
            "message": "Text analysis completed successfully"
        }
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP error in text detection: {str(e)}")
        if response.status_code == 400:
            error_detail = response.json()
            raise HTTPException(status_code=400, detail=f"Bad request: {str(error_detail)}")
        elif response.status_code == 401:
            raise HTTPException(status_code=401, detail="API key is invalid or missing")
        elif response.status_code == 429:
            raise HTTPException(status_code=429, detail="Rate limit exceeded")
        else:
            raise HTTPException(status_code=response.status_code, detail=f"API Error: {str(e)}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error in text detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Request Error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error in text detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Unexpected Error: {str(e)}")

@app.post("/image-ai-detection")
async def detect_ai_image(
    file: Optional[UploadFile] = File(None), 
    file_url: Optional[str] = Form(None),
    providers: str = Form("hive")
):
    """
    Detect if an image was generated by AI.
    
    - **file**: The image file to analyze (upload)
    - **file_url**: URL of the image to analyze (alternative to file upload)
    - **providers**: Comma-separated list of provider names (default: "hive")
    """
    url = f"{EDENAI_BASE_URL}/image/ai_detection"
    
    if file is None and file_url is None:
        logger.error("Neither file nor file_url provided")
        raise HTTPException(status_code=400, detail="Either file or file_url must be provided")
    
    try:
        if file:
            logger.info(f"Processing uploaded file for image AI detection: {file.filename}")
            # When using file upload, we need to use multipart/form-data
            files = {"file": (file.filename, await file.read(), file.content_type)}
            payload = {
                "providers": providers,
                "response_as_dict": True,
                "attributes_as_list": False,
                "show_original_response": False
            }
            headers_multipart = {
                "accept": "application/json",
                "authorization": f"Bearer {EDENAI_API_KEY}"
            }
            
            response = requests.post(url, data=payload, files=files, headers=headers_multipart)
        else:
            logger.info(f"Processing file URL for image AI detection: {file_url}")
            # When using file URL, we can use JSON
            payload = {
                "providers": providers,
                "file_url": file_url,
                "response_as_dict": True,
                "attributes_as_list": False,
                "show_original_response": False
            }
            
            response = requests.post(url, json=payload, headers=headers)
        
        response.raise_for_status()
        result = response.json()
        logger.info("Image AI detection request successful")
        return {
            "results": result,
            "message": "Image analysis completed successfully"
        }
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP error in image detection: {str(e)}")
        if hasattr(response, 'status_code'):
            if response.status_code == 400:
                error_detail = response.json()
                raise HTTPException(status_code=400, detail=f"Bad request: {str(error_detail)}")
            elif response.status_code == 401:
                raise HTTPException(status_code=401, detail="API key is invalid or missing")
            elif response.status_code == 429:
                raise HTTPException(status_code=429, detail="Rate limit exceeded")
            else:
                raise HTTPException(status_code=response.status_code, detail=f"API Error: {str(e)}")
        else:
            raise HTTPException(status_code=500, detail=f"API Error: {str(e)}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error in image detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Request Error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error in image detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Unexpected Error: {str(e)}")

@app.post("/deepfake-detection")
async def detect_deepfake(
    file: Optional[UploadFile] = File(None), 
    file_url: Optional[str] = Form(None),
    providers: str = Form("sensity")
):
    """
    Detect if an image or video is a deepfake.
    
    - **file**: The media file to analyze (upload)
    - **file_url**: URL of the media to analyze (alternative to file upload)
    - **providers**: Comma-separated list of provider names (default: "sensity")
    """
    url = f"{EDENAI_BASE_URL}/image/deepfake_detection"
    
    if file is None and file_url is None:
        logger.error("Neither file nor file_url provided")
        raise HTTPException(status_code=400, detail="Either file or file_url must be provided")
    
    try:
        if file:
            logger.info(f"Processing uploaded file for deepfake detection: {file.filename}")
            # When using file upload, we need to use multipart/form-data
            files = {"file": (file.filename, await file.read(), file.content_type)}
            payload = {
                "providers": providers,
                "response_as_dict": True,
                "attributes_as_list": False,
                "show_original_response": False
            }
            headers_multipart = {
                "accept": "application/json",
                "authorization": f"Bearer {EDENAI_API_KEY}"
            }
            
            response = requests.post(url, data=payload, files=files, headers=headers_multipart)
        else:
            logger.info(f"Processing file URL for deepfake detection: {file_url}")
            # When using file URL, we can use JSON
            payload = {
                "providers": providers,
                "file_url": file_url,
                "response_as_dict": True,
                "attributes_as_list": False,
                "show_original_response": False
            }
            
            response = requests.post(url, json=payload, headers=headers)
        
        response.raise_for_status()
        result = response.json()
        logger.info("Deepfake detection request successful")
        return {
            "results": result,
            "message": "Deepfake analysis completed successfully"
        }
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP error in deepfake detection: {str(e)}")
        if hasattr(response, 'status_code'):
            if response.status_code == 400:
                error_detail = response.json()
                raise HTTPException(status_code=400, detail=f"Bad request: {str(error_detail)}")
            elif response.status_code == 401:
                raise HTTPException(status_code=401, detail="API key is invalid or missing")
            elif response.status_code == 429:
                raise HTTPException(status_code=429, detail="Rate limit exceeded")
            else:
                raise HTTPException(status_code=response.status_code, detail=f"API Error: {str(e)}")
        else:
            raise HTTPException(status_code=500, detail=f"API Error: {str(e)}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error in deepfake detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Request Error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error in deepfake detection: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Unexpected Error: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    logger.info("Starting AI Detection API server...")
    uvicorn.run(app, host="0.0.0.0", port=8000)